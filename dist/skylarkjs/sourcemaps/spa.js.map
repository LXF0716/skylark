{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","eventer","router","velm","finder","noder","async","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","forEach","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","d","_setting","controllerSetting","controller","contentPath","require","type","resolve","then","e","create","route","result","trigger","when","hub","render","context","perform","RouteController","klass","call","Page","params","mixin","routeViewer","_params","_$rvc","find","_router","proxy","refresh","curCtx","current","previous","html","Plugin","hookers","plugin","each","hooker","props","Evented","PluginController","Application","config","plugins","_plugins","_config","pluginName","routes","_page","spa","page","document","title","baseUrl","undefined","toUrl","homePath","getConfig","go","path","promises1","map","lazy","promises2","all","concat","run","start","window"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\r\n    \"skylark-utils/skylark\",\r\n    \"skylark-utils/langx\",\r\n    \"skylark-utils/eventer\",\r\n    \"skylark-router/router\",\r\n    \"skylark-utils/velm\",\r\n    \"skylark-utils/finder\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/async\"\r\n], function(skylark, langx, eventer, router, velm, finder, noder, async) {\r\n    var Deferred = async.Deferred;\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            if (controllerSetting && !controller) {\r\n                require([controllerSetting.type], function(type) {\r\n                    controller = self.controller = new type(controllerSetting);\r\n                    d.resolve();\r\n                });\r\n            } else {\r\n                d.resolve();\r\n            }\r\n\r\n            return d.then(function() {\r\n                var e = eventer.create(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                eventer.trigger(self, e);\r\n\r\n                return Deferred.when(e.result).then(function() {\r\n                    eventer.trigger(router.hub(), \"prepared\", {\r\n                        route: self\r\n                    });\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = eventer.create(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            eventer.trigger(this, e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.klass({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.klass({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._$rvc = velm.find(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routing\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            this._$rvc.html(curCtx.route.render(curCtx));\r\n            //eventer.trigger(curCtx.route, \"rendered\", {\r\n            //    route: curCtx.route,\r\n            //    node: this._$rvc.domNode\r\n            //});\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.klass({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n            this._setting = setting;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n\r\n            if (controllerSetting && !controller) {\r\n                require([controllerSetting.type], function(type) {\r\n                    controller = self.controller = new type(controllerSetting);\r\n                    router.on(setting.hookers, {\r\n                        plugin: self\r\n                    }, langx.proxy(controller.perform, controller));\r\n                    d.resolve();\r\n                });\r\n            } else {\r\n                langx.each(setting.hookers, function(eventName, hooker) {\r\n                    router.on(eventName, {\r\n                        plugin: self\r\n                    }, hooker);\r\n                });\r\n                d.resolve();\r\n            }\r\n\r\n            return d.then(function() {\r\n                var e = eventer.create(\"preparing\", {\r\n                    result: true\r\n                });\r\n                eventer.trigger(self, e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(type, props) {\r\n            eventer.trigger(new langx.Evented(), type, props);\r\n            return this;\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.klass({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl; \r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = require.toUrl(\"\");\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path) {\r\n            router.go(path);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            var self = this;\r\n            var promises1 = langx.map(router.routes(), function(route, name) {\r\n                    if (route.lazy === false) {\r\n                        return route.prepare();\r\n                    }\r\n                }),\r\n                promises2 = langx.map(this._plugins, function(plugin, name) {\r\n                    return plugin.prepare();\r\n                });\r\n\r\n\r\n            return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                return eventer.trigger(router, \"starting\", {\r\n                    spa: self\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController,\r\n\r\n        \"velm\": velm\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n"]}